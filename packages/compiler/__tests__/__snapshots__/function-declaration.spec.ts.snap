// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FunctionDeclaration branched-function-returning-void 1`] = `
"; ModuleID = '__tests__/cases/function-declaration/branched-function-returning-void.ts'
source_filename = \\"__tests__/cases/function-declaration/branched-function-returning-void.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @branchedFunctionReturningVoid(i32 %arg1) {
entry:
  %count = alloca i32
  %arg = alloca i32
  store i32 %arg1, i32* %arg, align 4
  store i32 0, i32* %count, align 4
  %arg2 = load i32, i32* %arg, align 4
  %0 = icmp sgt i32 %arg2, 10
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  store i32 0, i32* %count, align 4
  br label %if-successor

else:                                             ; preds = %entry
  %arg3 = load i32, i32* %arg, align 4
  store i32 %arg3, i32* %count, align 4
  br label %if-successor

if-successor:                                     ; preds = %else, %then
  %count4 = load i32, i32* %count, align 4
  %1 = add i32 %count4, 1
  store i32 %1, i32* %count, align 4
  ret void
}
"
`;

exports[`FunctionDeclaration branched-function-with-return-value 1`] = `
"; ModuleID = '__tests__/cases/function-declaration/branched-function-with-return-value.ts'
source_filename = \\"__tests__/cases/function-declaration/branched-function-with-return-value.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define i1 @isPrime(i32 %x1) {
entry:
  %x = alloca i32
  store i32 %x1, i32* %x, align 4
  %return = alloca i1
  %x2 = load i32, i32* %x, align 4
  %0 = icmp sle i32 %x2, 2
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  store i1 true, i1* %return, align 1
  br label %if-successor

else:                                             ; preds = %entry
  store i1 false, i1* %return, align 1
  br label %if-successor

if-successor:                                     ; preds = %then, %else
  %return3 = load i1, i1* %return, align 1
  ret i1 %return3
}
"
`;

exports[`FunctionDeclaration void-function-with-return-statement 1`] = `
"; ModuleID = '__tests__/cases/function-declaration/void-function-with-return-statement.ts'
source_filename = \\"__tests__/cases/function-declaration/void-function-with-return-statement.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @voidFunctionWithReturnStatement(i32 %arg1) {
entry:
  %count = alloca i32
  %arg = alloca i32
  store i32 %arg1, i32* %arg, align 4
  %arg2 = load i32, i32* %arg, align 4
  %0 = icmp slt i32 %arg2, 10
  br i1 %0, label %then, label %if-successor

then:                                             ; preds = %entry
  br label %returnBlock

if-successor:                                     ; preds = %entry
  %arg3 = load i32, i32* %arg, align 4
  store i32 %arg3, i32* %count, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %if-successor, %then
  ret void
}
"
`;
