// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Array [1, 2, 3] 1`] = `
"; ModuleID = 'array/[1, 2, 3].ts'
source_filename = \\"array/[1, 2, 3].ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define { i32, i32, i4* }* @arrayLiteral() {
entry:
  %items = alloca [4 x i32]
  %empty = alloca { i32, i32, i4* }*
  %return = alloca { i32, i32, i4* }*
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* null, i32 0)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %empty, align 4
  %items1 = getelementptr inbounds [4 x i32], [4 x i32]* %items, i32 0, i32 0
  %0 = getelementptr inbounds [4 x i32], [4 x i32]* %items, i32 0, i32 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [4 x i32], [4 x i32]* %items, i32 0, i32 1
  store i32 2, i32* %1, align 4
  %2 = getelementptr inbounds [4 x i32], [4 x i32]* %items, i32 0, i32 2
  store i32 3, i32* %2, align 4
  %3 = getelementptr inbounds [4 x i32], [4 x i32]* %items, i32 0, i32 3
  store i32 4, i32* %3, align 4
  %constructorReturnValue2 = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 4)
  store { i32, i32, i4* }* %constructorReturnValue2, { i32, i32, i4* }** %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %return, align 4
  ret { i32, i32, i4* }* %return3
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

declare void @speedyJsGc()
"
`;

exports[`Array [i] 1`] = `
"; ModuleID = 'array/[i].ts'
source_filename = \\"array/[i].ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @arrayElementAccess() {
entry:
  %items = alloca [5 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [5 x i32], [5 x i32]* %items, i32 0, i32 0
  %0 = getelementptr inbounds [5 x i32], [5 x i32]* %items, i32 0, i32 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [5 x i32], [5 x i32]* %items, i32 0, i32 1
  store i32 2, i32* %1, align 4
  %2 = getelementptr inbounds [5 x i32], [5 x i32]* %items, i32 0, i32 2
  store i32 3, i32* %2, align 4
  %3 = getelementptr inbounds [5 x i32], [5 x i32]* %items, i32 0, i32 3
  store i32 4, i32* %3, align 4
  %4 = getelementptr inbounds [5 x i32], [5 x i32]* %items, i32 0, i32 4
  store i32 5, i32* %4, align 4
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 5)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %array3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %5 = call i32 @ArrayIi_geti({ i32, i32, i4* }* %array3, i32 2)
  %6 = mul i32 %5, 10
  call void @ArrayIi_setii({ i32, i32, i4* }* %array2, i32 2, i32 %6)
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

declare i32 @ArrayIi_geti({ i32, i32, i4* }*, i32)

declare void @ArrayIi_setii({ i32, i32, i4* }*, i32, i32)

declare void @speedyJsGc()
"
`;

exports[`Array assignment 1`] = `
"; ModuleID = 'array/assignment.ts'
source_filename = \\"array/assignment.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @arrayAssignment() {
entry:
  %value = alloca double
  %other = alloca { i32, i32, i4* }*
  %items = alloca [3 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [3 x i32], [3 x i32]* %items, i32 0, i32 0
  %0 = getelementptr inbounds [3 x i32], [3 x i32]* %items, i32 0, i32 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [3 x i32], [3 x i32]* %items, i32 0, i32 1
  store i32 2, i32* %1, align 4
  %2 = getelementptr inbounds [3 x i32], [3 x i32]* %items, i32 0, i32 2
  store i32 3, i32* %2, align 4
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 3)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  store { i32, i32, i4* }* %array2, { i32, i32, i4* }** %other, align 4
  %other3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %other, align 4
  %3 = call double @ArrayId_geti({ i32, i32, i4* }* %other3, i32 2)
  store double %3, double* %value, align 8
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

declare double @ArrayId_geti({ i32, i32, i4* }*, i32)

declare void @ArrayId_setid({ i32, i32, i4* }*, i32, double)

declare void @speedyJsGc()
"
`;

exports[`Array fill 1`] = `
"; ModuleID = 'array/fill.ts'
source_filename = \\"array/fill.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @arrayFill() {
entry:
  %array = alloca { i32, i32, i4* }*
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayId_constructori(i32 100)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array1 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %fillReturnValue = call { i32, i32, i4* }* @ArrayId_filld({ i32, i32, i4* }* %array1, double 1.000000e+01)
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %fillReturnValue3 = call { i32, i32, i4* }* @ArrayId_filldi({ i32, i32, i4* }* %array2, double 1.000000e+01, i32 5)
  %array4 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %fillReturnValue5 = call { i32, i32, i4* }* @ArrayId_filldii({ i32, i32, i4* }* %array4, double 1.000000e+01, i32 5, i32 50)
  ret void
}

declare { i32, i32, i4* }* @ArrayId_constructori(i32)

declare { i32, i32, i4* }* @ArrayId_filld({ i32, i32, i4* }*, double)

declare { i32, i32, i4* }* @ArrayId_filldi({ i32, i32, i4* }*, double, i32)

declare { i32, i32, i4* }* @ArrayId_filldii({ i32, i32, i4* }*, double, i32, i32)

declare void @speedyJsGc()
"
`;

exports[`Array length 1`] = `
"; ModuleID = 'array/length.ts'
source_filename = \\"array/length.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @arrayLength() {
entry:
  %i = alloca i32
  %array = alloca { i32, i32, i4* }*
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayId_constructorPdi(double* null, i32 0)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array1 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  call void @ArrayId_lengthi({ i32, i32, i4* }* %array1, i32 100)
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %0 = call i32 @ArrayId_length({ i32, i32, i4* }* %array2)
  store i32 %0, i32* %i, align 4
  ret void
}

declare { i32, i32, i4* }* @ArrayId_constructorPdi(double*, i32)

declare i32 @ArrayId_length({ i32, i32, i4* }*)

declare void @ArrayId_lengthi({ i32, i32, i4* }*, i32)

declare void @speedyJsGc()
"
`;

exports[`Array new 1`] = `
"; ModuleID = 'array/new.ts'
source_filename = \\"array/new.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @arrayConstructorCase() {
entry:
  %items4 = alloca [3 x double]
  %arrayWithElements = alloca { i32, i32, i4* }*
  %items = alloca [1 x i1]
  %arrayWithElement = alloca { i32, i32, i4* }*
  %arrayOfSize = alloca { i32, i32, i4* }*
  %emptyArray = alloca { i32, i32, i4* }*
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIb_constructorPbi(i1* null, i32 0)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %emptyArray, align 4
  %constructorReturnValue1 = call { i32, i32, i4* }* @ArrayIi_constructori(i32 1000)
  store { i32, i32, i4* }* %constructorReturnValue1, { i32, i32, i4* }** %arrayOfSize, align 4
  %items2 = getelementptr inbounds [1 x i1], [1 x i1]* %items, i32 0, i32 0
  %0 = getelementptr inbounds [1 x i1], [1 x i1]* %items, i32 0, i32 0
  store i1 true, i1* %0, align 1
  %constructorReturnValue3 = call { i32, i32, i4* }* @ArrayIb_constructorPbi(i1* %items2, i32 1)
  store { i32, i32, i4* }* %constructorReturnValue3, { i32, i32, i4* }** %arrayWithElement, align 4
  %items5 = getelementptr inbounds [3 x double], [3 x double]* %items4, i32 0, i32 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %items4, i32 0, i32 0
  store double 1.000000e+00, double* %1, align 8
  %2 = getelementptr inbounds [3 x double], [3 x double]* %items4, i32 0, i32 1
  store double 2.000000e+00, double* %2, align 8
  %3 = getelementptr inbounds [3 x double], [3 x double]* %items4, i32 0, i32 2
  store double 3.000000e+00, double* %3, align 8
  %constructorReturnValue6 = call { i32, i32, i4* }* @ArrayId_constructorPdi(double* %items5, i32 3)
  store { i32, i32, i4* }* %constructorReturnValue6, { i32, i32, i4* }** %arrayWithElements, align 4
  ret void
}

declare { i32, i32, i4* }* @ArrayIb_constructorPbi(i1*, i32)

declare { i32, i32, i4* }* @ArrayIi_constructori(i32)

declare { i32, i32, i4* }* @ArrayId_constructorPdi(double*, i32)

declare void @speedyJsGc()
"
`;

exports[`Array pop 1`] = `
"; ModuleID = 'array/pop.ts'
source_filename = \\"array/pop.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @arrayPop() {
entry:
  %end = alloca i32
  %items = alloca [2 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 0
  %0 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 1
  store i32 2, i32* %1, align 4
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 2)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %popReturnValue = call i32 @ArrayIi_pop({ i32, i32, i4* }* %array2)
  store i32 %popReturnValue, i32* %end, align 4
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

declare i32 @ArrayIi_pop({ i32, i32, i4* }*)

declare void @speedyJsGc()
"
`;

exports[`Array push 1`] = `
"; ModuleID = 'array/push.ts'
source_filename = \\"array/push.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @arrayPush() {
entry:
  %items8 = alloca [3 x i32]
  %newLength = alloca i32
  %items4 = alloca [1 x i32]
  %items = alloca [2 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 0
  %0 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 1
  store i32 2, i32* %1, align 4
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 2)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %pushReturnValue = call i32 @ArrayIi_pushPii({ i32, i32, i4* }* %array2, i32* null, i32 0)
  %array3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %items5 = getelementptr inbounds [1 x i32], [1 x i32]* %items4, i32 0, i32 0
  %2 = getelementptr inbounds [1 x i32], [1 x i32]* %items4, i32 0, i32 0
  store i32 1, i32* %2, align 4
  %pushReturnValue6 = call i32 @ArrayIi_pushPii({ i32, i32, i4* }* %array3, i32* %items5, i32 1)
  %array7 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %items9 = getelementptr inbounds [3 x i32], [3 x i32]* %items8, i32 0, i32 0
  %3 = getelementptr inbounds [3 x i32], [3 x i32]* %items8, i32 0, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds [3 x i32], [3 x i32]* %items8, i32 0, i32 1
  store i32 2, i32* %4, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %items8, i32 0, i32 2
  store i32 3, i32* %5, align 4
  %pushReturnValue10 = call i32 @ArrayIi_pushPii({ i32, i32, i4* }* %array7, i32* %items9, i32 3)
  store i32 %pushReturnValue10, i32* %newLength, align 4
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

declare i32 @ArrayIi_pushPii({ i32, i32, i4* }*, i32*, i32)

declare void @speedyJsGc()
"
`;

exports[`Array shift 1`] = `
"; ModuleID = 'array/shift.ts'
source_filename = \\"array/shift.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @arrayShift() {
entry:
  %front = alloca i32
  %items = alloca [2 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 0
  %0 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 1
  store i32 2, i32* %1, align 4
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 2)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %shiftReturnValue = call i32 @ArrayIi_shift({ i32, i32, i4* }* %array2)
  store i32 %shiftReturnValue, i32* %front, align 4
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

declare i32 @ArrayIi_shift({ i32, i32, i4* }*)

declare void @speedyJsGc()
"
`;

exports[`Array splice 1`] = `
"; ModuleID = 'array/splice.ts'
source_filename = \\"array/splice.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @arrayShift() {
entry:
  %items6 = alloca [4 x i32]
  %items = alloca [10 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 0
  %0 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 1
  store i32 2, i32* %1, align 4
  %2 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 2
  store i32 3, i32* %2, align 4
  %3 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 3
  store i32 4, i32* %3, align 4
  %4 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 4
  store i32 5, i32* %4, align 4
  %5 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 5
  store i32 6, i32* %5, align 4
  %6 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 6
  store i32 7, i32* %6, align 4
  %7 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 7
  store i32 8, i32* %7, align 4
  %8 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 8
  store i32 9, i32* %8, align 4
  %9 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 9
  store i32 10, i32* %9, align 4
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 10)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %spliceReturnValue = call { i32, i32, i4* }* @ArrayIi_spliceii({ i32, i32, i4* }* %array2, i32 5, i32 2)
  %array3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %spliceReturnValue4 = call { i32, i32, i4* }* @ArrayIi_splicei({ i32, i32, i4* }* %array3, i32 4)
  %array5 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %items7 = getelementptr inbounds [4 x i32], [4 x i32]* %items6, i32 0, i32 0
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %items6, i32 0, i32 0
  store i32 11, i32* %10, align 4
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %items6, i32 0, i32 1
  store i32 12, i32* %11, align 4
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %items6, i32 0, i32 2
  store i32 13, i32* %12, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %items6, i32 0, i32 3
  store i32 14, i32* %13, align 4
  %spliceReturnValue8 = call { i32, i32, i4* }* @ArrayIi_spliceiiPii({ i32, i32, i4* }* %array5, i32 2, i32 2, i32* %items7, i32 4)
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

declare { i32, i32, i4* }* @ArrayIi_spliceii({ i32, i32, i4* }*, i32, i32)

declare { i32, i32, i4* }* @ArrayIi_splicei({ i32, i32, i4* }*, i32)

declare { i32, i32, i4* }* @ArrayIi_spliceiiPii({ i32, i32, i4* }*, i32, i32, i32*, i32)

declare void @speedyJsGc()
"
`;

exports[`Array unshift 1`] = `
"; ModuleID = 'array/unshift.ts'
source_filename = \\"array/unshift.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @arrayUnshift() {
entry:
  %items8 = alloca [3 x i32]
  %newLength = alloca i32
  %items4 = alloca [1 x i32]
  %items = alloca [2 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 0
  %0 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 1
  store i32 2, i32* %1, align 4
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 2)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %unshiftReturnValue = call i32 @ArrayIi_unshiftPii({ i32, i32, i4* }* %array2, i32* null, i32 0)
  %array3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %items5 = getelementptr inbounds [1 x i32], [1 x i32]* %items4, i32 0, i32 0
  %2 = getelementptr inbounds [1 x i32], [1 x i32]* %items4, i32 0, i32 0
  store i32 1, i32* %2, align 4
  %unshiftReturnValue6 = call i32 @ArrayIi_unshiftPii({ i32, i32, i4* }* %array3, i32* %items5, i32 1)
  %array7 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %items9 = getelementptr inbounds [3 x i32], [3 x i32]* %items8, i32 0, i32 0
  %3 = getelementptr inbounds [3 x i32], [3 x i32]* %items8, i32 0, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds [3 x i32], [3 x i32]* %items8, i32 0, i32 1
  store i32 2, i32* %4, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %items8, i32 0, i32 2
  store i32 3, i32* %5, align 4
  %unshiftReturnValue10 = call i32 @ArrayIi_unshiftPii({ i32, i32, i4* }* %array7, i32* %items9, i32 3)
  store i32 %unshiftReturnValue10, i32* %newLength, align 4
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

declare i32 @ArrayIi_unshiftPii({ i32, i32, i4* }*, i32*, i32)

declare void @speedyJsGc()
"
`;
